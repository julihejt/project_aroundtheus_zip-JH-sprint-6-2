!function(){"use strict";class e{constructor(e,t){this._inputSelector=e.inputSelector,this._formSelector=e.formSelector,this._submitButtonSelector=e.submitButtonSelector,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._inactiveButtonClass=e.inactiveButtonClass,this._form=t,this._inputElements=Array.from(this._form.querySelectorAll(this._inputSelector)),this._submitButton=this._form.querySelector(this._submitButtonSelector)}_showInputError(e){const t=this._form.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}_hideInputError(e){const t=this._form.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._errorClass)}_checkInputValidity(e){return e.validity.valid?this._hideInputError(e):this._showInputError(e)}resetValidation(){this._toggleButtonState(),this._form.reset(),this._inputElements.forEach((e=>{this._hideInputError(e)}))}disableButton(){this._submitButton.disabled=!0,this._submitButton.classList.add(this._inactiveButtonClass)}_toggleButtonState(){this._hasInvalidInput()?this.disableButton():(this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1)}_hasInvalidInput(){return!this._inputElements.every((e=>e.validity.valid))}_setEventListeners(){this._form.addEventListener("submit",(e=>{e.preventDefault()})),this._inputElements.forEach((e=>{e.addEventListener("input",(t=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}enableValidation(){this._setEventListeners()}}class t{constructor(e,t,s,r,i,n){this._data=e||null,this._name=e.name,this._link=e.link,this.id=e._id,this._cardSelector=t,this._handleImageClick=s,this._handleDeleteCard=r,this._handleLikeIconClick=i,this._handleUnlikeIconClick=n,this.isLiked=e.isLiked}_setEventListeners(){this._cardElement.querySelector(".card__image").addEventListener("click",(()=>{this._handleImageClick({name:this._name,link:this._link})})),this._likeButton.addEventListener("click",(()=>{this.isLiked?this._handleUnlikeIconClick(this):!1===this.isLiked&&this._handleLikeIconClick(this)})),this._cardElement.querySelector(".card__delete-button").addEventListener("click",(()=>{this._handleDeleteCard(this)}))}likeHeartIcon(){this._likeButton.classList.add("card__like-button_active")}unlikeHeartIcon(){this._likeButton.classList.remove("card__like-button_active")}handleDeleteCard(){this._cardElement.remove(),this._cardElement=null}getView(){if(this._data){this._cardElement=document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0);const e=this._cardElement.querySelector(".card__image"),t=this._cardElement.querySelector(".card__title");return e.src=this._data.link,e.alt=this._data.name,t.textContent=this._data.name,this._likeButton=this._cardElement.querySelector(".card__like-button"),this._setEventListeners(),this._renderLikes(),this._cardElement}return console.log("Card data is not available."),null}_renderLikes(){this.isLiked?this.likeHeartIcon():this.unlikeHeartIcon()}}class s{constructor(e,t){let{items:s,renderer:r}=e;this._items=s,this._renderer=r,this._container=document.querySelector(t)}renderItems(){this._items.forEach((e=>{const t=this._renderer(e);this.addItem(t)}))}addItem(e){this._container.prepend(e)}}class r{constructor(e){let{popupSelector:t}=e;this._popupElement=document.querySelector(t),this._closeButton=this._popupElement.querySelector(".modal__close"),this._handleEscClose=this._handleEscClose.bind(this)}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose(e){"Escape"===e.key&&this.close()}setEventListeners(){this._popupElement.querySelector(".modal__close").addEventListener("click",(()=>{this.close()})),this._popupElement.addEventListener("click",(e=>{e.target.classList.contains("modal_opened")&&this.close()}))}}class i extends r{constructor(e,t){super({popupSelector:e}),this._popupForm=this._popupElement?.querySelector(".modal__form"),this._handleFormSubmit=t,this._popupForm?this._inputElements=Array.from(this._popupForm.querySelectorAll(".modal__input")):this._inputElements=[],this._submitButton=this._popupForm.querySelector(".modal__button"),this.setEventListeners()}_getInputValues(){const e={};return this._inputElements.forEach((t=>{e[t.name]=t.value})),e}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues())}))}setLoading(e){this._submitButton.textContent=e?"Saving...":"Save"}}const n={formSelector:".modal__form",errorClass:"modal__error",inputErrorClass:"modal__input_type_error",inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled"},o=(document.querySelector("#profile-title-input"),document.querySelector("#profile-description-input"),document.querySelector("#profile-edit-button"),document.querySelector("#profile-edit-modal")),a=(document.querySelector(".profile__add-button"),o.querySelector(".modal__form"),document.querySelector("#add__card-form"),document.querySelector(".profile__avatar-modal"),document.querySelector(".card__delete-button"),document.querySelector("#card-delete-modal"),document.querySelector(".modal__form"),new class{constructor(e){let{baseUrl:t,headers:s}=e;this._baseUrl=t,this._headers=s}_checkResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}createNewCard(e){return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:e.name,link:e.link})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}deleteCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}likeCard(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}removeLike(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}editProfile(e,t){return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e,about:t})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}updateAvatar(e){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}renderCards(){return Promise.all([this.getUserInfo(),this.getInitialCards()])}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"d7e04e76-ddf3-44aa-931a-ba12647359c4","Content-Type":"application/json"}})),l=new class{constructor(e){let{name:t,description:s,avatar:r}=e;this._name=document.querySelector(t),this._description=document.querySelector(s),this._avatar=document.querySelector(r)}getUserInfo(){return{name:this._name.textContent,description:this._description.textContent}}setUserInfo(e){this._name.textContent=e.name,this._description.textContent=e.description}updateAvatar(e){this._avatar.src=e}}({name:".profile__title",description:"#profile__description",avatar:".profile__image"}),d=document.querySelector("#profile-edit-button"),c=document.querySelector("#profile-edit-modal"),u=document.querySelector("#profile-title-input"),h=document.querySelector("#profile-description-input"),_=document.querySelector(".profile__add-button"),m=document.querySelector(".profile__avatar-button"),p=c.querySelector(".modal__form"),E=document.querySelector("#add__card-form");new e(n,p).enableValidation();const f=new e(n,E);f.enableValidation();const v=new class extends r{constructor(e){super({popupSelector:e}),this._imageElement=this._popupElement?.querySelector(".modal__image"),this._imageTitle=this._popupElement?.querySelector(".modal__image_description"),this.setEventListeners()}open(e){this._imageElement.src=e.link,this._imageElement.alt=`Image: ${e.name}`,this._imageTitle.textContent=e.name,super.open()}}("#preview-image-modal"),S=new i("#profile-edit-modal",(function(e){console.log("Edit Profile Input Values",e),a.editProfile(e.title,e.description).then((()=>{l.setUserInfo({name:e.title,description:e.description}),S.close()})).catch((e=>{console.error("Error updating profile:",e)})).finally((()=>{S.setLoading(!1)}))})),b=new i("#add-card-modal",(function(e){console.log("Add Card Input Values:",e);const t={name:e.title,link:e.url};a.createNewCard(t).then((e=>{!function(e){const t=L(e);C.addItem(t),b.close(),E.reset(),f.disableButton()}(e),E.reset(),f.disableButton(),b.close()})).catch((e=>{console.error(e)}))})),k=new i("#profile-avatar-modal",(function(e){k.setLoading(!0),a.updateAvatar(e.avatar).then((()=>{l.updateAvatar(e.avatar),k.close()})).catch((e=>{console.error(e)})).finally((()=>{k.setLoading(!1)}))}),"saving..."),y=new class extends r{constructor(e){super({popupSelector:e}),this._popupForm=this._popupElement.querySelector(".modal__form"),this._submitButton=this._popupForm.querySelector(".modal__button"),this._submitButtonContent=this._submitButton.textContent}setLoading(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Saving...";e?(this._submitButton.textContent=t,this._submitButton.disabled=!0):(this._submitButton.textContent=this._submitButtonContent,this._submitButton.disabled=!1)}setSubmitAction(e){this._handleFormSubmit=e}setEventListeners(){this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit()})),super.setEventListeners()}}("#delete-card-modal");let C;function L(e){return new t(e,"#card-template",g,B,q,I).getView()}function g(e){let{name:t,link:s}=e;v.open({name:t,link:s})}function q(e){a.likeCard(e.id).then((t=>{e.likeHeartIcon(),e.isLiked=!0})).catch((e=>{console.error(e)}))}function I(e){a.removeLike(e.id).then((t=>{e.unlikeHeartIcon(),e.isLiked=!1})).catch((e=>{console.error(e)}))}function B(e){y.open(),y.setSubmitAction((()=>{y.setLoading(!0,"Deleting..."),a.deleteCard(e.id).then((()=>{e.handleDeleteCard(),y.close()})).catch((e=>{console.error(e)})).finally((()=>{y.setLoading(!1,"Yes")}))}))}a.getUserInfo().then((e=>{l.setUserInfo({name:e.name,description:e.about}),l.updateAvatar(e.avatar)})).catch((e=>{console.error(e)})),a.getInitialCards().then((e=>{C=new s({items:e,renderer:L},".cards__list"),C.renderItems()})).catch((e=>{console.error(e)})),d.addEventListener("click",(()=>{const{name:e,description:t}=l.getUserInfo();u.value=e.trim(),h.value=t.trim(),S.open()})),_.addEventListener("click",(()=>{b.open()})),m&&m.addEventListener("click",(()=>{k.open()})),y.setEventListeners()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,